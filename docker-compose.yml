version: '3.8'
services:
  mongodb:
    image: mongo:7.0-jammy
    container_name: template-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: template_password
      MONGO_INITDB_DATABASE: template_db
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data/db
      - ./config/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - template-network
    healthcheck:
      test:
        - CMD
        - mongosh
        - '--eval'
        - db.adminCommand('ping')
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  redis:
    image: redis:7.2-alpine
    container_name: template-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - template-network
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    command: redis-server --appendonly yes
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile.dev
    container_name: template-backend-dev
    restart: unless-stopped
    networks:
      - template-network
    volumes:
      - ./apps/backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3003
      - MONGODB_URI=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017/backend_db?authSource=admin
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - '3003:3003'
    healthcheck:
      test:
        - CMD
        - curl
        - '-f'
        - http://localhost:3003/api/health
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile.dev
    container_name: template-frontend-dev
    restart: unless-stopped
    networks:
      - template-network
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:3003/api
      - VITE_APP_NAME=frontend
      - VITE_NODE_ENV=development
    ports:
      - '3000:3000'
    healthcheck:
      test:
        - CMD
        - curl
        - '-f'
        - http://localhost:3000/health
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      backend:
        condition: service_healthy
  notification-service:
    build:
      context: ./apps/notification-service
      dockerfile: Dockerfile.dev
    container_name: template-notification-service-dev
    restart: unless-stopped
    networks:
      - template-network
    volumes:
      - ./apps/notification-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3001
      - >-
        MONGODB_URI=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017/notification-service_db?authSource=admin
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - '3001:3001'
    healthcheck:
      test:
        - CMD
        - curl
        - '-f'
        - http://localhost:3001/health
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
  email-worker:
    build:
      context: ./apps/email-worker
      dockerfile: Dockerfile.dev
    container_name: template-email-worker-dev
    restart: unless-stopped
    networks:
      - template-network
    volumes:
      - ./apps/email-worker:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - MONGODB_URI=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017/email-worker_db?authSource=admin
    depends_on:
      redis:
        condition: service_healthy
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
networks:
  template-network:
    driver: bridge
